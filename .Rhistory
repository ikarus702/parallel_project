if(i<7){
cosso.data.frame[i] <- paste0(cosso.result[i],"(",cosso.result[i+6],")")
}else{
cosso.data.frame[i] <- cosso.result[i]
}
}
colnames(cosso.data.frame) <- c("ACC","FPR","FNR","TPR","RSS","MSE","Error")
table.summary <- rbind(table.summary,cosso.data.frame)
table.summary
load("C:/Users/Byungjun/Desktop/About VT Stat/My Research/Jun_Glasso_NGK/Unif_Semi_NGK_PK_Data_Off050_prelim.RData")
##################### COSSO #######################
D.index = 100
opt.beta <- rep(0,D.index)
RSS <- rep(0,D.index)
MSE <- rep(0,D.index)
Cosso.Iter <- 100
tol <- 10^(-3)
tmp.RSS <- rep(0,length(D.index))
tmp.MSE <- rep(0,length(D.index))
ind.TPR <- rep(0,length(D.index))
ind.ACC <- rep(0,length(D.index))
ind.FNR <- rep(0,length(D.index))
ind.FPR <- rep(0,length(D.index))
## 59
for(d.index in 1:100){
eps <- eps.list[[d.index]]
sim.data <- data.list[[d.index]]
y <- sim.data[,1]
X <- sim.data[,2]
old.beta <- 1
old.RSS <- 1
for(iter in 1:20){
coef.summary <- summary(lm(y~0+X))
new.beta <-coef.summary$coefficients[1]
## COSSO
scale.y <- matrix(c(y-X*new.beta),ncol=1)
z <- as.matrix(sim.data[,-(1:2)])
cosso.sol <- try(cosso(z,scale.y,family="Gaussian"),silent=TRUE)
if ('try-error' %in% class(cosso.sol)){
cat("Cosso Solution has error! \n")
next;
}else{
cosso.summary <- cosso.sol
pred.nonzero <- try(predict.cosso(cosso.summary,type="nonzero"),silent=TRUE)
pred.fit <- try(predict.cosso(cosso.summary,z,type="fit"),silent=TRUE)
if(('try-error' %in% class(pred.nonzero))|('try-error' %in% class(pred.fit))){
cat("Cosso Solution has error! \n")
next;
}else{
suppressWarnings(pred.cosso <- pred.nonzero)
suppressWarnings(fit.cosso <- pred.fit)
new.RSS <- sum((scale.y-fit.cosso)^2)/n
true.f <- scale.y-eps
MSE[d.index] <- sum((true.f-fit.cosso)^2)/n
conv.crit <- c((old.beta-new.beta)^2,(new.RSS-old.RSS)^2)
if(max(conv.crit)< tol){
opt.beta[d.index] <- new.beta
RSS[d.index] <- new.RSS
opt.cosso <- cosso.summary
cat("The parameters converge \n")
break;
}else{
old.beta <- new.beta
old.RSS <- new.RSS
y <- as.numeric(y-fit.cosso)
cat("The number of iteration is ",iter,"!\n")
}
}
}
}
if(iter==20){
cat(d.index,"th data does not converge \n")
next;
}
plot.cosso(opt.cosso,plottype="Path")
suppressWarnings(pred.cosso <- predict.cosso(opt.cosso,type="nonzero"))
suppressWarnings(fit.cosso <- predict.cosso(opt.cosso,z,type="fit"))
cosso.index <- as.numeric(pred.cosso)
actual <- c(rep(1,p),rep(0,c(Tot.p-p)))
predicted <- rep(0,Tot.p)
predicted[cosso.index] <- 1
var.table <- table(actual,predicted)
if(d.index == 1){
if(all(predicted==0)){
var.table <- cbind(var.table,c(0,0))
}
ind.TPR[d.index] <- diag(var.table)[2]/rowSums(var.table)[2]
ind.ACC[d.index] <- sum(diag(var.table))/Tot.p
ind.FPR[d.index] <- var.table[1,2]/rowSums(var.table)[1]
ind.FNR[d.index] <- var.table[2,1]/rowSums(var.table)[2]
index.summary <- c(cosso.index)
tab.sum <- var.table
}else{
if(all(predicted==0)){
var.table <- cbind(var.table,c(0,0))
}
ind.TPR[d.index] <- diag(var.table)[2]/rowSums(var.table)[2]
ind.ACC[d.index] <- sum(diag(var.table))/Tot.p
ind.FPR[d.index] <- var.table[1,2]/rowSums(var.table)[1]
ind.FNR[d.index] <- var.table[2,1]/rowSums(var.table)[2]
index.summary <- c(index.summary,c(cosso.index))
tab.sum <- tab.sum +var.table
}
}
NA.index <- which(is.na(ind.TPR))
Acc <- sum(diag(tab.sum))/sum(tab.sum)
FPR <- tab.sum[1,2]/rowSums(tab.sum)[1]
FNR <- tab.sum[2,1]/rowSums(tab.sum)[2]
TPR <- diag(tab.sum)[2]/rowSums(tab.sum)[2]
SD.ACC <- sd(ind.ACC[-NA.index])
SD.FPR <- sd(ind.FPR[-NA.index])
SD.FNR <- sd(ind.FNR[-NA.index])
SD.TPR <- sd(ind.TPR[-NA.index])
SD.RSS <- sd(RSS[-NA.index])
SD.MSE <- sd(MSE[-NA.index])
Error <- length(NA.index)
cosso.result <-  matrix(c(Acc,FPR,FNR,TPR,mean(RSS[-NA.index]),mean(MSE[-NA.index]),SD.ACC,SD.FPR,SD.FNR,SD.TPR,SD.RSS,SD.MSE,Error),nrow=1)
cosso.result <- round(cosso.result,3)
cosso.data.frame <- matrix(NA,1,7)
for(i in 1:7){
if(i<7){
cosso.data.frame[i] <- paste0(cosso.result[i],"(",cosso.result[i+6],")")
}else{
cosso.data.frame[i] <- cosso.result[i]
}
}
colnames(cosso.data.frame) <- c("ACC","FPR","FNR","TPR","RSS","MSE","Error")
table.summary <- rbind(table.summary,cosso.data.frame)
table.summary
getwd()
write.table(table.summary,file="table_cosso_prelim_PK.csv",sep=",",col.names = TRUE,row.names = FALSE)
exp(5)
4.885^2
exp(3)
exp(5)
exp(7)
rm(list=ls())
midterm2_report <- read.csv("C:/Users/Byungjun/Desktop/About VT Stat/Teaching/STAT 4705/Exam/midterm2_report.csv", header=FALSE)
View(midterm2_report)
detach(miterm2_report)
rm(list=ls())
midterm2_report <- read.csv("C:/Users/Byungjun/Desktop/About VT Stat/Teaching/STAT 4705/Exam/midterm2_report.csv")
View(midterm2_report)
midterm2 <- midterm2_report$Midterm1.Current.Score
midterm2
midterm2 <- midterm2_report$Midterm2.Current.Score
midterm2
midterm2 <- midterm2[-1]
summary(midterm2)
midterm2
midterm2 <- as.numeric(midterm2)
summary(midterm2)
midterm2
midterm2 <- as.numeric(midterm2_report$Midterm2.Current.Score[-1])
midterm2
midterm2 <- as.numeric(midterm2_report$Midterm2.Current.Score[-1])
midterm2 <- (midterm2_report$Midterm2.Current.Score[-1])
hist(midterm2)
rm(list=ls())
midterm2_report <- read.csv("C:/Users/Byungjun/Desktop/About VT Stat/Teaching/STAT 4705/Exam/midterm2_report.csv")
View(midterm2_report)
midterm2_report$Midterm2..617918.
class(midterm2_report$Midterm2..617918.)
midterm2 <- midterm2_report$Midterm2..617918.
summary(midterm2)
hist(midterm2,main="Midterm2_Summmary",xlab="midterm2_score")
hist(midterm2,main="Midterm2_Summmary",xlab="midterm2_score",bin=5)
hist
?hist
hist(midterm2,main="Midterm2_Summmary",xlab="midterm2_score",breaks = =5)
hist(midterm2,main="Midterm2_Summmary",xlab="midterm2_score",breaks = 5)
hist(midterm2,main="Midterm2_Summmary",xlab="midterm2_score",breaks = 10)
summary(midterm2)
hist(midterm2,main="Midterm2_Summary",xlab="midterm2_score",breaks = 10)
abline(v=median(midterm2),col="red")
hist(midterm2,main="Midterm2_Summary",xlab="midterm2_score",breaks = 10)
abline(v=median(midterm2),col="red",lwd=2);abline(v=mean(midterm2),col="blue",lwd=2)
legend("topleft",legned=c("median","mean"),lty=c(1,1),col=c("red","blue"),lwd=c(2,2))
legend("topleft",legend=c("median","mean"),lty=c(1,1),col=c("red","blue"),lwd=c(2,2))
hist(midterm2,main="Midterm2_Summary",xlab="midterm2_score",breaks = 20)
hist(midterm2,main="Midterm2_Summary",xlab="midterm2_score",breaks = seq(0,100,by=10))
sd(midterm2)
230-3.25*15*sqrt(1+0.1)
0.16/20
qnorm(0.99)
qt(0.95,7)
qt(0.975,7)
qt(0.99,7)
qt(0.95,6)
qt(0.975,6)
qt(0.99,6)
96/39.364
96/12.401
exp(-2)
exp(-1)
new
diag(1:5,10,10)
x <- c(rnorm(24,0,1),4,6)
omega <- c(runif(36,0.1,10),6,6)
x
:q
setwd("~/GitHub/parallel_project")
load("Time_Check_Block.RData")
rm(list=ls())
load("Time_Check_Block.RData")
result.summary$single.time
result.summary$single.time[3]
result.summary$mpi.time
plot(result.summary$mpi.time[,3]~result.summary$block.size,type="h")
plot(result.summary$mpi.time[,3]~result.summary$block.size,type="b")
plot(result.summary$mpi.time[,3]~result.summary$block.size,type="b",main="Comp. Time For 500 x 500 matrix", ylab="Time (sec)", xlab="Block Size")
plot(result.summary$mpi.time[,3]~result.summary$block.size,type="b",ylim(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For 500 x 500 matrix", ylab="Time (sec)", xlab="Block Size")
plot(result.summary$mpi.time[,3]~result.summary$block.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For 500 x 500 matrix", ylab="Time (sec)", xlab="Block Size")
plot(result.summary$mpi.time[,3]~result.summary$block.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For 500 x 500 matrix", ylab="Time (sec)", xlab="Block Size",lwd=2)
single.time <- result.summary$single.time
load("Time_Check_Mat.RData")
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For 500 x 500 matrix", ylab="Time (sec)", xlab="Block Size",lwd=2)
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2)
result.summary$single.time
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2,col="red")
legend("lefttop",legend=c("MPI","Single"),type=c("b","b"),pch=c(1,2),lwd=c(2,2))
lines(result.summary$single.time[,3]~result.summary$mat.size,type="l",pch=2,lwd=2,col="red")
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="l",pch=2,lwd=2,col="red")
legend("lefttop",legend=c("MPI","Single"),type=c("l","l"),pch=c(1,2),lwd=c(2,2))
legend("lefttop",legend=c("MPI","Single"),lty=c("l","l"),pch=c(1,2),lwd=c(2,2))
legend("topleft",legend=c("MPI","Single"),lty=c("l","l"),pch=c(1,2),lwd=c(2,2))
legend("topleft",legend=c("MPI","Single"),lty=c("l","l"),lwd=c(2,2))
legend("topleft",c("MPI","Single"),lty=c("l","l"),lwd=c(2,2),col=c("black","red"))
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2,col="red")
legend("topleft",c("MPI","Single"),lty=c("l","l"),lwd=c(2,2),col=c("black","red"))
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",ylim=c(0,ceiling(max(result.summary$mpi.time[,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2,col="red",lty=2)
legend("topleft",c("MPI","Single"),lty=c(1,2),lwd=c(2,2),col=c("black","red"))
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",xlim=c(0,600),ylim=c(0,ceiling(max(result.summary$mpi.time[1:5,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",xlim=c(0,600),ylim=c(0,ceiling(max(result.summary$mpi.time[1:4,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2,col="red",lty=2)
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",xlim=c(0,600),ylim=c(0,ceiling(max(result.summary$mpi.time[1:3,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2,col="red",lty=2)
plot(result.summary$mpi.time[,3]~result.summary$mat.size,type="b",xlim=c(0,600),ylim=c(0,ceiling(max(result.summary$single.time[1:3,3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="Matrix Size",lwd=2)
lines(result.summary$single.time[,3]~result.summary$mat.size,type="b",pch=2,lwd=2,col="red",lty=2)
legend("topleft",c("MPI","Single"),lty=c(1,2),lwd=c(2,2),col=c("black","red"))
load("Time_Check_node.RData")
result.summary$mpi.time
single.time
plot(result.summary$mpi.time[,3]~result.summary$node.size,type="b",ylim=c(0,ceiling(max(single.time))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="No. of Nodes",lwd=2)
points(1,single.time,lwd=2,pch=2,col="red")
plot(result.summary$mpi.time[,3]~result.summary$node.size,type="b",ylim=c(0,ceiling(max(single.time[3]))),
main="Comp. Time For Matrix", ylab="Time (sec)", xlab="No. of Nodes",lwd=2)
points(1,single.time,lwd=2,pch=2,col="red")
points(1,single.time[3],lwd=2,pch=2,col="red")
legend("topright",c("MPI","Single"),type=c("l","p"),lwd=c(2,2),col=c("black","red"))
legend("topright",c("MPI","Single"),lty=c(1,NA),pch=c(1,2,),lwd=c(2,2),col=c("black","red"))
legend("topright",c("MPI","Single"),lty=c(1,NA),pch=c(1,2),lwd=c(2,2),col=c("black","red"))
plot(result.summary$mpi.time[,3]~result.summary$node.size,type="b",ylim=c(0,ceiling(max(single.time[3]))),
main="Comp. Time For 500 X 500 Matrix", ylab="Time (sec)", xlab="No. of Nodes",lwd=2)
points(1,single.time[3],lwd=2,pch=2,col="red")
legend("topright",c("MPI","Single"),lty=c(1,NA),pch=c(1,2),lwd=c(2,2),col=c("black","red"))
Omega<- matrix(runif(200^2,0.1,10),200,200)
A.Gamma <- chol(Omega)
Omega
library(matrixcalc)
is.positive.definite(Omega)
Omega<- diag(runif(200,0.1,10))
Omega
diag(Omega)
upper(Omega)
upper.tri(Omega)
Omega[upper.tri(Omega)] <- runif(1,0.1,10)
Omega[upper.tri(Omega)]
Omega[upper.tri(Omega)] <- runif((200*199)/2,0.1,10)
Omega[upper.tri(Omega)]
Omega[lower.tri(Omega)] <- Omega[upper.tri(Omega)]
is.symmetric.matrix(Omega)
Omega[1:5,1:5]
Omega[lower.tri(Omega)] <- t(Omega)[lower.tri(Omega)]
is.symmetric(Omega)
is.symmetric.matrix(Omega)
is.positive.definite(Omega)
A.Gamma <- chol(Omega)
Omega<- diag(runif(200,0.1,10))
Omega[upper.tri(Omega)] <- runif((200*199)/2,0.1,1)
Omega[lower.tri(Omega)] <- t(Omega)[lower.tri(Omega)]
A.Gamma <- chol(Omega)
Omega<- diag(runif(200,0.1,10))
Omega[upper.tri(Omega)] <- runif((200*199)/2,-1,1)
Omega[lower.tri(Omega)] <- t(Omega)[lower.tri(Omega)]
A.Gamma <- chol(Omega)
Omega<- diag(runif(200,0.1,10))
Omega[upper.tri(Omega)] <- runif((200*199)/2,-1,0)
Omega[lower.tri(Omega)] <- t(Omega)[lower.tri(Omega)]
A.Gamma <- chol(Omega)
Gamma <- diag(runif(200,0.1,10))
Gamma[upper.tri(Omega)] <- runif((200*199)/2,0.1,10)
Omega <- t(Gamma)%*%Gamma
A.Gamma <- chol(Omega)
Omega
diag(Gamma)
Gamma[lower.tri(Gamma)]
dim(Gamma)
diag(Omega)
Omega <- t(Gamma)%*%Gamma
chol(Omega)
Gamma <- diag(runif(200,0.1,10))
Gamma[upper.tri(Omega)] <- runif((200*199)/2,1,10)
Omega <- t(Gamma)%*%Gamma
A.Gamma <- chol(Omega)
Gamma <- diag(runif(100,0.1,10))
Gamma[upper.tri(Omega)] <- runif((100*99)/2,1,10)
Gamma <- diag(runif(100,0.1,10))
Gamma[upper.tri(Gamma)] <- runif((100*99)/2,1,10)
Omega <- t(Gamma)%*%Gamma
A.Gamma <- chol(Omega)
all.equal(Omega == t(Gamma)%*%Gamma)
all.equal(Omega, t(Gamma)%*%Gamma)
Gamma[1:10,1:10]
Gamma <- diag(round(runif(100,0.1,10)),2)
Gamma[upper.tri(Gamma)] <- round(runif((100*99)/2,1,10),2)
Omega <- t(Gamma)%*%Gamma
length(Gamma[upper.tri(Gamma)])
[upper.tri(Gamma)]
upper.tri(Gamma)
Gamma <- diag(round(runif(100,0.1,10),2))
Gamma[upper.tri(Gamma)] <- round(runif((100*99)/2,1,10),2)
Omega <- t(Gamma)%*%Gamma
A.Gamma <- chol(Omega)
is.positive.definite(Omega)
is.negative.semi.definite(Omega)
is.positive.semi.definite(Omega)
model1=function(dim,xi.val,off.diag)#the function to generate a tridiagonal strcture
{
prec=diag(dim)*xi.val
for(i in 1:dim){
for(j in 1:dim){
if(abs(i-j)==1){
prec[i,j] <- off.diag
}
}
}
return(prec)
}
prec1 <- model1(10,1,0.5)
prec1
is.positive.semi.definite(prec1)
prec1
model2=function(dim,xi.val,off.diag)#the function to generate a tridiagonal strcture
{
prec=diag(dim)*xi.val
for(i in 1:dim){
for(j in 1:dim){
if(abs(i-j)==1){
prec[i,j] <- off.diag
}else if(abs(i-j)==2){
prec[i,j] <- off.diag^2
}
}
}
return(prec)
}
model2(100,1,0.5)
diag(1,10)
model3 <- function(dim)#the function to generate a scale-free network
{
omega=matrix(0,dim,dim)
for (i in 1:(dim-1))
{
for (j in (i+1):dim)
{
omega[i,j]=ifelse(omega[i,j]==1,runif(1,0,0.5),omega[i,j])
}
}
omega=omega+t(omega)
omega=omega/omega[1,1]
return(omega)
}
model3(10)
library(igraph)
model3 <- function(dim)#the function to generate a scale-free network
{
graph=barabasi.game(dim,directed=FALSE)
omega=matrix(0,dim,dim)
omega=as.matrix(get.adjacency(graph,type="upper"))
for (i in 1:(dim-1))
{
for (j in (i+1):dim)
{
omega[i,j]=ifelse(omega[i,j]==1,runif(1,0,0.5),omega[i,j])
}
}
omega=omega+t(omega)
omega=diagDomMatrixGen1(omega)
omega=omega/omega[1,1]
return(omega)
}
model3(10)
diagDomMatrixGen1 <- function(empricalMatrix)
{
empricalMatrix=round(empricalMatrix,10)
if (!(is.positive.definite(empricalMatrix)))
{
v1=max(rowSums(abs(empricalMatrix))-2*abs(diag(empricalMatrix)))+1 #the smallest number to add to the precision matrix so that it turns strict diagonal dominant
diag(empricalMatrix)=abs(diag(empricalMatrix))+v1
}
return(empricalMatrix)
}
model3 <- function(dim)#the function to generate a scale-free network
{
graph=barabasi.game(dim,directed=FALSE)
omega=matrix(0,dim,dim)
omega=as.matrix(get.adjacency(graph,type="upper"))
for (i in 1:(dim-1))
{
for (j in (i+1):dim)
{
omega[i,j]=ifelse(omega[i,j]==1,runif(1,0,0.5),omega[i,j])
}
}
omega=omega+t(omega)
omega=diagDomMatrixGen1(omega)
omega=omega/omega[1,1]
return(omega)
}
model(10)
model3(10)
is.positive.semi.definite(model3)
is.positive.semi.definite(model3(10))
model4 <- function(dim){
prec <- diag(dim)
for(i in 1:dim){
for(j in 1:dim){
if(i!=j){
prec[i,j]=0.5
}
}
}
return(prec)
}
model4(10)
is.positive.semi.definite(model4(10))
model4 <- function(dim){
prec <- diag(dim)
for(i in 1:dim){
for(j in 1:dim){
if(i!=j){
prec[i,j]=runif(1,0,0.9)
}
}
}
return(prec)
}
is.positive.semi.definite(model4(10))
model4 <- function(dim){
prec <- diag(dim)
for(i in 1:dim){
for(j in c(i+1):dim){
if(i!=j){
off.val <- runif(1,0,0.9)
prec[i,j]=off.val
prec[j,i]=off.val
}
}
}
return(prec)
}
model4(10)
model4 <- function(dim){
prec <- diag(dim)
for(i in 1:dim){
for(j in c(i):dim){
if(i!=j){
off.val <- runif(1,0,0.9)
prec[i,j]=off.val
prec[j,i]=off.val
}
}
}
return(prec)
}
model4(10)
is.positive.semi.definite(model4(10))
model4 <- function(dim){
prec <- diag(dim)
for(i in 1:dim){
for(j in c(i):dim){
if(i!=j){
off.val <- runif(1,0,0.5)
prec[i,j]=off.val
prec[j,i]=off.val
}
}
}
return(prec)
}
is.positive.semi.definite(model4(10))
is.positive.semi.definite(model4(10))
is.positive.semi.definite(model4(10))
is.positive.semi.definite(model4(10))
